apply plugin: 'maven-publish'

android {
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }
}
version = version
group = GROUP
//
//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom.project {
//            name POM_NAME
//            artifactId POM_ARTIFACT_ID
//            packaging POM_PACKAGING
//            description POM_DESCRIPTION
//            url POM_URL
//
//            scm {
//                url POM_SCM_URL
//            }
//
//            licenses {
//                license {
//                    name POM_LICENCE_NAME
//                    url POM_LICENCE_URL
//                    Distribution POM_LICENCE_DIST
//                }
//            }
//
//            developers {
//                developer {
//                    id POM_DEVELOPER_ID
//                    name POM_DEVELOPER_NAME
//                }
//            }
//        }
//    }
//}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('RELEASE_REPOSITORY_URL')
}

def getSnapshotRepositoryUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('SNAPSHOT_REPOSITORY_URL')
}

def getRepositoryUsername() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('REPOSITORY_USERNAME')
}

def getRepositoryPassword() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('REPOSITORY_PASSWORD')
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
        publications {
            SoterBoots(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release
                groupId = group
                artifactId = project.getName()
                version = version
                artifact androidJavadocsJar
                artifact androidSourcesJar
            }
        }
    }
}


//apply from: rootProject.file('gradle/check.gradle')
